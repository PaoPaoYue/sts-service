name: "[Production] Deployment workflow"

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Name of the service to deploy'
        required: true
        type: choice
        options:
          - demo
        default: demo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '8'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Google Kubernetes Engine
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Helm & Kubectl
      uses: mamezou-tech/setup-helmfile@v2.0.0

    - name: Authenticate to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Gradle Packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: gradle-${{ runner.os }}

    - name: Extract Version from build.gradle(.kts)
      id: extract_version
      run: |
        if [ -f "${{ github.event.inputs.service }}/build.gradle.kts" ]; then
          VERSION=$(grep '^version\s*=' "${{ github.event.inputs.service }}/build.gradle.kts" | awk -F'=' '{gsub(/["'\'']/, "", $2); print $2}' | tr -d '[:space:]')
        elif [ -f "${{ github.event.inputs.service }}/build.gradle" ]; then
          VERSION=$(grep '^version\s*=' "${{ github.event.inputs.service }}/build.gradle" | awk -F'=' '{gsub(/["'\'']/, "", $2); print $2}' | tr -d '[:space:]')
        else
          echo "No build.gradle or build.gradle.kts found in ${{ github.event.inputs.service }}!"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Build Docker Image
      run: |
        PROJECT_DIR="${{ github.event.inputs.service }}"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        DOCKER_REPO="${{ secrets.DOCKER_USERNAME }}/sts-service-${{ github.event.inputs.service }}"
        DOCKER_TAG="${{ env.version }}-$TIMESTAMP"
        DOCKER_IMAGE="$DOCKER_REPO:$DOCKER_TAG"
        docker build -t $DOCKER_IMAGE -f "${{ github.event.inputs.service }}"/Dockerfile .
        echo "repo=$DOCKER_REPO" >> $GITHUB_ENV
        echo "tag=$DOCKER_TAG" >> $GITHUB_ENV

    - name: Push Docker Image to Docker Hub
      run: |
        docker push $DOCKER_IMAGE

    - name: Deploy to Production Namespace with Helm
      run: |
        helm upgrade --install ${{ github.event.inputs.service }} "${{ github.event.inputs.service }}/helmChart" \
          --namespace prod \
          --set image.repository=${{ env.repo }} \
          --set image.tag=${{ env.tag }} \
          --set image.pullPolicy=Always \
          --set 'env.spring.profiles.active=prod' \
          --version ${{ env.version }}

    - name: Wait for Rollout to Complete
      run: |
        kubectl rollout status deployment/${{ github.event.inputs.service }} --namespace prod
